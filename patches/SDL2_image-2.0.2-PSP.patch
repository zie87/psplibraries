--- SDL2_image-2.0.2/IMG_png.c	2017-10-23 17:31:29.000000000 +0200
+++ SDL2_image-2.0.5/IMG_png.c	2019-06-30 06:52:03.000000000 +0200
@@ -1,6 +1,6 @@
 /*
   SDL_image:  An example image loading library for use with SDL
-  Copyright (C) 1997-2017 Sam Lantinga <slouken@libsdl.org>
+  Copyright (C) 1997-2019 Sam Lantinga <slouken@libsdl.org>
 
   This software is provided 'as-is', without any express or implied
   warranty.  In no event will the authors be held liable for any damages
@@ -23,6 +23,9 @@
 
 #include "SDL_image.h"
 
+/* We'll always have PNG save support */
+#define SAVE_PNG
+
 #if !(defined(__APPLE__) || defined(SDL_IMAGE_USE_WIC_BACKEND)) || defined(SDL_IMAGE_USE_COMMON_BACKEND)
 
 #ifdef LOAD_PNG
@@ -74,23 +77,43 @@
 #if (PNG_LIBPNG_VER_MINOR < 5)
 #define LIBPNG_VERSION_12
 typedef png_bytep png_const_bytep;
+typedef png_color *png_const_colorp;
+#endif
+#if (PNG_LIBPNG_VER_MINOR < 4)
+typedef png_structp png_const_structp;
+typedef png_infop png_const_infop;
 #endif
 #if (PNG_LIBPNG_VER_MINOR < 6)
-typedef png_structp png_const_structrp;
-typedef png_infop png_const_inforp;
+typedef png_structp png_structrp;
+typedef png_infop png_inforp;
+typedef png_const_structp png_const_structrp;
+typedef png_const_infop png_const_inforp;
+/* noconst15: version < 1.6 doesn't have const, >= 1.6 adds it */
+/* noconst16: version < 1.6 does have const, >= 1.6 removes it */
+typedef png_structp png_noconst15_structrp;
+typedef png_inforp png_noconst15_inforp;
+typedef png_const_inforp png_noconst16_inforp;
+#else
+typedef png_const_structp png_noconst15_structrp;
+typedef png_const_inforp png_noconst15_inforp;
+typedef png_inforp png_noconst16_inforp;
 #endif
+#else
+typedef png_const_structp png_noconst15_structrp;
+typedef png_const_inforp png_noconst15_inforp;
+typedef png_inforp png_noconst16_inforp;
 #endif
 
 static struct {
     int loaded;
     void *handle;
-    png_infop (*png_create_info_struct) (png_const_structrp png_ptr);
+    png_infop (*png_create_info_struct) (png_noconst15_structrp png_ptr);
     png_structp (*png_create_read_struct) (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
     void (*png_destroy_read_struct) (png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
-    png_uint_32 (*png_get_IHDR) (png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
-    png_voidp (*png_get_io_ptr) (png_const_structrp png_ptr);
+    png_uint_32 (*png_get_IHDR) (png_noconst15_structrp png_ptr, png_noconst15_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method);
+    png_voidp (*png_get_io_ptr) (png_noconst15_structrp png_ptr);
     png_byte (*png_get_channels) (png_const_structrp png_ptr, png_const_inforp info_ptr);
-    png_uint_32 (*png_get_PLTE) (png_const_structrp png_ptr, png_inforp info_ptr, png_colorp *palette, int *num_palette);
+    png_uint_32 (*png_get_PLTE) (png_const_structrp png_ptr, png_noconst16_inforp info_ptr, png_colorp *palette, int *num_palette);
     png_uint_32 (*png_get_tRNS) (png_const_structrp png_ptr, png_inforp info_ptr, png_bytep *trans, int *num_trans, png_color_16p *trans_values);
     png_uint_32 (*png_get_valid) (png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 flag);
     void (*png_read_image) (png_structrp png_ptr, png_bytepp image);
@@ -101,18 +124,23 @@
     void (*png_set_packing) (png_structrp png_ptr);
     void (*png_set_read_fn) (png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
     void (*png_set_strip_16) (png_structrp png_ptr);
+    int (*png_set_interlace_handling) (png_structrp png_ptr);
     int (*png_sig_cmp) (png_const_bytep sig, png_size_t start, png_size_t num_to_check);
+#ifdef PNG_SETJMP_SUPPORTED
 #ifndef LIBPNG_VERSION_12
     jmp_buf* (*png_set_longjmp_fn) (png_structrp, png_longjmp_ptr, size_t);
 #endif
+#endif
+#ifdef SAVE_PNG
     png_structp (*png_create_write_struct) (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
     void (*png_destroy_write_struct) (png_structpp png_ptr_ptr, png_infopp info_ptr_ptr);
     void (*png_set_write_fn) (png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn);
-    void (*png_set_IHDR) (png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type);
-    void (*png_write_info) (png_structrp png_ptr, png_const_inforp info_ptr);
-    void (*png_set_rows) (png_const_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers);
+    void (*png_set_IHDR) (png_noconst15_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type);
+    void (*png_write_info) (png_structrp png_ptr, png_noconst15_inforp info_ptr);
+    void (*png_set_rows) (png_noconst15_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers);
     void (*png_write_png) (png_structrp png_ptr, png_inforp info_ptr, int transforms, png_voidp params);
     void (*png_set_PLTE) (png_structrp png_ptr, png_inforp info_ptr, png_const_colorp palette, int num_palette);
+#endif
 } lib;
 
 #ifdef LOAD_PNG_DYNAMIC
@@ -133,13 +161,13 @@
             return -1;
         }
 #endif
-        FUNCTION_LOADER(png_create_info_struct, png_infop (*) (png_const_structrp png_ptr))
+        FUNCTION_LOADER(png_create_info_struct, png_infop (*) (png_noconst15_structrp png_ptr))
         FUNCTION_LOADER(png_create_read_struct, png_structp (*) (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn))
         FUNCTION_LOADER(png_destroy_read_struct, void (*) (png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr))
-        FUNCTION_LOADER(png_get_IHDR, png_uint_32 (*) (png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method))
-        FUNCTION_LOADER(png_get_io_ptr, png_voidp (*) (png_const_structrp png_ptr))
+        FUNCTION_LOADER(png_get_IHDR, png_uint_32 (*) (png_noconst15_structrp png_ptr, png_noconst15_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method))
+        FUNCTION_LOADER(png_get_io_ptr, png_voidp (*) (png_noconst15_structrp png_ptr))
         FUNCTION_LOADER(png_get_channels, png_byte (*) (png_const_structrp png_ptr, png_const_inforp info_ptr))
-        FUNCTION_LOADER(png_get_PLTE, png_uint_32 (*) (png_const_structrp png_ptr, png_inforp info_ptr, png_colorp *palette, int *num_palette))
+        FUNCTION_LOADER(png_get_PLTE, png_uint_32 (*) (png_const_structrp png_ptr, png_noconst16_inforp info_ptr, png_colorp *palette, int *num_palette))
         FUNCTION_LOADER(png_get_tRNS, png_uint_32 (*) (png_const_structrp png_ptr, png_inforp info_ptr, png_bytep *trans, int *num_trans, png_color_16p *trans_values))
         FUNCTION_LOADER(png_get_valid, png_uint_32 (*) (png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 flag))
         FUNCTION_LOADER(png_read_image, void (*) (png_structrp png_ptr, png_bytepp image))
@@ -150,18 +178,23 @@
         FUNCTION_LOADER(png_set_packing, void (*) (png_structrp png_ptr))
         FUNCTION_LOADER(png_set_read_fn, void (*) (png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn))
         FUNCTION_LOADER(png_set_strip_16, void (*) (png_structrp png_ptr))
+        FUNCTION_LOADER(png_set_interlace_handling, int (*) (png_structrp png_ptr))
         FUNCTION_LOADER(png_sig_cmp, int (*) (png_const_bytep sig, png_size_t start, png_size_t num_to_check))
+#ifdef PNG_SETJMP_SUPPORTED
 #ifndef LIBPNG_VERSION_12
         FUNCTION_LOADER(png_set_longjmp_fn, jmp_buf* (*) (png_structrp, png_longjmp_ptr, size_t))
 #endif
+#endif
+#ifdef SAVE_PNG
         FUNCTION_LOADER(png_create_write_struct, png_structp (*) (png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn))
         FUNCTION_LOADER(png_destroy_write_struct, void (*) (png_structpp png_ptr_ptr, png_infopp info_ptr_ptr))
         FUNCTION_LOADER(png_set_write_fn, void (*) (png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn))
-        FUNCTION_LOADER(png_set_IHDR, void (*) (png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type))
-        FUNCTION_LOADER(png_write_info, void (*) (png_structrp png_ptr, png_const_inforp info_ptr))
-        FUNCTION_LOADER(png_set_rows, void (*) (png_const_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers))
+        FUNCTION_LOADER(png_set_IHDR, void (*) (png_noconst15_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type))
+        FUNCTION_LOADER(png_write_info, void (*) (png_structrp png_ptr, png_noconst15_inforp info_ptr))
+        FUNCTION_LOADER(png_set_rows, void (*) (png_noconst15_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers))
         FUNCTION_LOADER(png_write_png, void (*) (png_structrp png_ptr, png_inforp info_ptr, int transforms, png_voidp params))
         FUNCTION_LOADER(png_set_PLTE, void (*) (png_structrp png_ptr, png_inforp info_ptr, png_const_colorp palette, int num_palette))
+#endif
     }
     ++lib.loaded;
 
@@ -265,6 +298,8 @@
      * the normal method of doing things with libpng).  REQUIRED unless you
      * set up your own error handlers in png_create_read_struct() earlier.
      */
+
+#ifdef PNG_SETJMP_SUPPORTED
 #ifndef LIBPNG_VERSION_12
     if ( setjmp(*lib.png_set_longjmp_fn(png_ptr, longjmp, sizeof (jmp_buf))) )
 #else
@@ -274,7 +309,7 @@
         error = "Error reading the PNG file.";
         goto done;
     }
-
+#endif
     /* Set up the input control */
     lib.png_set_read_fn(png_ptr, src, png_read_data);
 
@@ -284,7 +319,10 @@
             &color_type, &interlace_type, NULL, NULL);
 
     /* tell libpng to strip 16 bit/color files down to 8 bits/color */
-    lib.png_set_strip_16(png_ptr) ;
+    lib.png_set_strip_16(png_ptr);
+
+    /* tell libpng to de-interlace (if the image is interlaced) */
+    lib.png_set_interlace_handling(png_ptr);
 
     /* Extract multiple pixels with bit depths of 1, 2, and 4 from a single
      * byte into separate bytes (useful for paletted and grayscale images).
@@ -463,9 +501,6 @@
 
 #endif /* !defined(__APPLE__) || defined(SDL_IMAGE_USE_COMMON_BACKEND) */
 
-/* We'll always have PNG save support */
-#define SAVE_PNG
-
 #ifdef SAVE_PNG
 
 int IMG_SavePNG(SDL_Surface *surface, const char *file)
@@ -518,12 +553,13 @@
             SDL_SetError("Couldn't create image information for PNG file");
             return -1;
         }
-
+#ifdef PNG_SETJMP_SUPPORTED
 #ifndef LIBPNG_VERSION_12
         if (setjmp(*lib.png_set_longjmp_fn(png_ptr, longjmp, sizeof (jmp_buf))))
 #else
         if (setjmp(png_ptr->jmpbuf))
 #endif
+#endif
         {
             lib.png_destroy_write_struct(&png_ptr, &info_ptr);
             SDL_SetError("Error writing the PNG file.");
@@ -598,6 +634,17 @@
 
 #endif /* USE_LIBPNG */
 
+/* Replace C runtime functions with SDL C runtime functions for building on Windows */
+#define MINIZ_NO_STDIO
+#define MINIZ_NO_TIME
+#define MINIZ_SDL_MALLOC
+#define MZ_ASSERT(x) SDL_assert(x)
+#undef memcpy
+#define memcpy  SDL_memcpy
+#undef memset
+#define memset  SDL_memset
+#define strlen  SDL_strlen
+
 #include "miniz.h"
 
 static int IMG_SavePNG_RW_miniz(SDL_Surface *surface, SDL_RWops *dst, int freedst)
